using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Text;

namespace MUNitySchema.Models.Resolution
{

    /// <summary>
    /// A resolution is a type of document to work with inside a committee. The Resolution contains the three parts:
    /// Header, Preamble, OperativeSection.
    /// The Header is containing the general information of the document like name, submitter, topic etc.
    /// The Preamble contains a list of paragraphs.
    /// The operative section contains a list of paragraphs and amendments for the different paragraphs that are created.
    /// </summary>
    public class Resolution : INotifyPropertyChanged
    {
        /// <summary>
        /// An id to let the system identify the resolution. Note that the header contains a property for name or full name
        /// if you want to have another solution for your users to find the resolution easier. The Id is generated by the
        /// Resolution itself when it is created.
        /// </summary>
        public string ResolutionId { get; set; }

        private DateTime _date;
        /// <summary>
        /// A Date that is first set when the resolution is created and can be used as a last change date.
        /// </summary>
        public DateTime Date {
            get => _date;
            set
            {
                _date = value;
                NotifyPropertyChanged(nameof(Date));
            }
        }

        private ResolutionHeader _header;
        /// <summary>
        /// The header of the resolution containing the general information of the document.
        /// </summary>
        public ResolutionHeader Header {
            get => _header;
            set
            {
                this._header = value;
                NotifyPropertyChanged(nameof(Header));
            }
        }

        private ResolutionPreamble _preamble;
        /// <summary>
        /// The preamble of the resolution containing the different paragraphs.
        /// </summary>
        public ResolutionPreamble Preamble {
            get => _preamble;
            set
            {
                _preamble = value;
                NotifyPropertyChanged(nameof(Preamble));
            }
        }

        private OperativeSection _operativeSection;
        /// <summary>
        /// The operative section of the resolution containing the paragraphs and amendments.
        /// </summary>
        public OperativeSection OperativeSection {
            get => _operativeSection;
            set
            {
                _operativeSection = value;
                NotifyPropertyChanged(nameof(OperativeSection));
            }
        }

        /// <summary>
        /// Creates a new instance of a resolution with a new Id.
        /// </summary>
        public Resolution()
        {
            ResolutionId = Guid.NewGuid().ToString();
            Preamble = new ResolutionPreamble();
            OperativeSection = new OperativeSection();
            Header = new ResolutionHeader();
            Date = DateTime.Now;
        }

        /// <summary>
        /// Event that is fired when a property has changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Internal Event to fire the Property Changed event.
        /// </summary>
        /// <param name="name"></param>
        protected void NotifyPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
    }
}
